/*return; 语句用于终止当前函数的执行，并立即返回到调用函数的位置。在这种情况下，当条件满足时，即索引无效时，函数会提前结束执行，不会继续执行函数中的其他语句。

具体来说，return; 语句的作用包括：

终止函数执行： return; 语句告诉程序立即停止当前函数的执行，不再继续执行后续的语句。

返回到调用点： 执行 return; 后，程序会立即返回到调用该函数的位置，继续执行调用函数中的后续语句。

在这段代码中，当索引值无效时，打印错误消息后使用 return; 语句终止了函数的执行。这样做可以防止在索引无效的情况下继续执行可能导致错误的代码，同时提前结束函数执行，避免进一步的操作。*/

#include<stdio.h>
#include<stdlib.h>
//定义数据域的数据结构为 int
#define eleType int//也可以直接int 但是自定义方便修改

//定义一个节点的结构体
typedef struct ListNode {
	eleType data;//数据域
	struct  ListNode* next;//指针域

};

//定义一个链表的结构体
typedef struct LinkedList {
	struct  ListNode* head;//头节点
	size_t size;//元素个数
};

//创建  初始化传入的list代表需要进行初始化的地址也就是指针
void LinkedListCreat(LinkedList* list)
{//初始一开始是空链表
	list->head = NULL;//头节点为空
	list->size = 0;//链表个数为零
}

//销毁链表
void LinkListDestroy(LinkedList* list)
{	//从链表头开始遍历
	while (list->head) {
		ListNode* temp = list->head;//将遍历中的节点存在临时变量temp中
		list->head = list->head->next;//改变但概念链表的头节点让他变为他的后继节点
		//这洋原先的头节点就剥离出来比你高存放在临时变量temp中
		free(temp);//清理内存
	}//head最终指向空
	list->size = 0;//把元素个数变为空
}
//实现链表元素的插入
void LinkedListInsert(LinkedList* list, int i, eleType value)//链表指针，插入位置，插入值
{	//	判断插入位置是否合法
	if (i<0 || i>list->size)
	{
		printf("Invalid index\n");
		return;
	}
	//否则利用value生成一个节点，利用malloc来生成插入节点的内存
	ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
	//并且把value的值赋给数据域data
	newNode->data = value;
	//然后判断插入位置
	if (i == 0) {
		newNode->next = list->head;
		list->head = newNode;
	}
	/*newNode->next = list->head;：这行代码将新节点 newNode 的 next 指针指向原先链表的头节点 list->head，使得新节点的下一个节点为原先的头节点。
list->head = newNode;：这行代码将链表的头指针 list->head 指向新节点 newNode，使得新节点成为链表的新头节点。*/
	//否则从链表头考试执行i-1次循环
	else {
		ListNode* current = list->head;
		for (int j = 0; j < i - 1; ++j)
		{
			current = current->next;//找到要插入位置的前节点
		}
		newNode->next = current->next;//然后将生成节点的后继节点变成current节点的后继节点
		current->next = newNode;//并且把current的后继节点变成新生成的节点

	}
	list->size++;//把个数加1.完成操作

}
//删除
void LinkedListDelete(LinkedList* list, int i)//给一个链表指针和删除位置
{
	if (i < 0 || i >= list->size)
	{
		printf("Invalid index\n");
	}
	//如果要删除链表的位置是0
	if (i == 0)
	{
		ListNode* next = list->head->next;//如果删除位置是0,则直接把头节点的后继节点缓存下来放在next的变量中然后把头节点的内存释放
		free(list->head);
		list->head = next;
	}
	else {
		ListNode* current = list->head;
		for (int j = 0; j < i - 1; ++j)
		{
			current = current->next;//找到前驱节点
		}
		ListNode* next = current->next->next;//删除节点的后继节点存到next中
			free(current->next);
			current->next = next;

		
		--list->size;

	}
}
//查找
ListNode* LinkedListFind(LinkedList* list, eleType value)
{
	ListNode* current = list->head;
	while (current)

	{
		if (current->data == value)
		{
			return current;
		}
		current = current->next;
	}
	return NULL;

}
//索引
ListNode* LinkdeListGet(LinkedList* list, int i)
{
	if (i < 0 || i >= list->size)
	{
		printf("Invalid index\n");
		return NULL;
	}
	ListNode* current = list->head;
	for (int j = 0; j < i ; j++)
	{
		current = current->next;

	}
	return current;
}

//链表修改
void LinkListUpdate(LinkedList* list, int i, eleType value)
{
	ListNode* node = LinkdeListGet(list, i);

	if(node){
		node->data = value;
	}
}
void LinkedPrint(LinkedList* list)
{
	ListNode* current = list->head;
	while (current)
	{
		printf("%d->", current->data);
		current = current->next;
	}
	printf("NULL\n");

}
int main()
{
	LinkedList list;
	LinkedListCreat(&list);
		LinkedListInsert(&list,0,10);
		LinkedListInsert(&list, 1,20);
		LinkedListInsert(&list, 3,40);
		printf("Original List");
		LinkedPrint(&list);
		LinkedListDelete(&list, 2);
		LinkListUpdate(&list,1,100);
		ListNode* found = LinkedListFind(&list, 30);
		if (!found)
		{
			printf("element not found");
		}
}
